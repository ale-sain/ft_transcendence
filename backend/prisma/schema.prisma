generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int              @id @default(autoincrement())
  username             String           @unique
  password             String
  avatar               String           @default("https://www.w3schools.com/howto/img_avatar.png")
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  useTwoFA             Boolean          @default(false)
  ChannelMessage       ChannelMessage[]
  channels             ChannelUser[]
  matchHistory         MatchHistory[]
  friendshipsInitiated Friendship[]     @relation("Initiator")
  friendshipsReceived  Friendship[]     @relation("Receiver")

  @@map("users")
}

model Friendship {
  id          Int      @id @default(autoincrement())
  initiatorId Int
  receiverId  Int
  status      FriendshipStatus

  initiator User @relation("Initiator", fields: [initiatorId], references: [id])
  receiver  User @relation("Receiver", fields: [receiverId], references: [id])

  @@unique([initiatorId, receiverId])
}

model Channel {
  name       String           @id @unique
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  password   String?
  visibility Visibility
  messages   ChannelMessage[]
  users      ChannelUser[]
}

model ChannelUser {
  channel     Channel		  @relation(fields: [channelName], references: [name])
  channelName String
  role   	  Role
  user   User 				  @relation(fields: [userId], references: [id])
  userId Int

  @@id([channelName, userId])
}

model ChannelMessage {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  content   String
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [name])
  senderId  Int
  sender    User     @relation(fields: [senderId], references: [id])
}

model MatchHistory {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  nbWin     Int
  nbLoose   Int
  nbGames   Int
  user      User     @relation(fields: [userId], references: [id])
  userId    Int

  @@map("match_history")
}

enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum Visibility {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum Role {
	OWNER
	ADMIN
	MEMBER
	BANNED
}
