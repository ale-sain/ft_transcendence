generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int              @id @default(autoincrement())
  username             String           @unique
  password             String
  avatar               String           @default("default_avatar_url")
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  useTwoFA             Boolean          @default(false)
  ChannelMessage       ChannelMessage[]
  channels             ChannelUser[]
  friendshipsInitiated Friendship[]     @relation("Initiator")
  friendshipsReceived  Friendship[]     @relation("Receiver")
  // sentMessages     PrivateMessage[] @relation("sentMessages")
  // receivedMessages PrivateMessage[] @relation("receivedMessages")
  matchs         MatchUser[] // several games related to a user
  stats          Stats?      // just one state related to each user
  @@map("users")
}

model Friendship {
  id          Int      @id @default(autoincrement())
  initiatorId Int
  receiverId  Int
  status      String   @default("NONE")
  createdAt   DateTime @default(now())

  initiator User @relation("Initiator", fields: [initiatorId], references: [id])
  receiver  User @relation("Receiver", fields: [receiverId], references: [id])

  @@unique([initiatorId, receiverId])
}

model Channel {
  name       String           @id @unique
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  password   String?
  visibility String           @default("public")
  //   channelOwner   User             @relation(fields: [channelOwnerId], references: [id])
  // channelOwnerId Int
  messages   ChannelMessage[]
  users      ChannelUser[]
}

model ChannelUser {
  channel     Channel @relation(fields: [channelName], references: [name])
  channelName String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@id([channelName, userId])
}

model ChannelMessage {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  content   String
  channelId String
  channel   Channel  @relation(fields: [channelId], references: [name])
  senderId  Int
  sender    User     @relation(fields: [senderId], references: [id])
}

model PrivateMessage {
  id         Int      @id @default(autoincrement())
  timestamp  DateTime @default(now())
  content    String
  //   sender     User     @relation("sentMessages", fields: [senderId], references: [id])
  //   receiver   User     @relation("receivedMessages", fields: [receiverId], references: [id])
  senderId   String
  receiverId String
}

model Stats {
  id          Int      @id @default(autoincrement())
  user        User     @relation(fields: [userId], references: [id])
  userId      Int      @unique
  nbGames     Int
  nbWin       Int
  nbLoose     Int
  @@map("stats")
}

model Match {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  players         MatchUser[]
  
  @@map("match")
}

model MatchUser {
  player        User     @relation(fields:[playerId], references: [id])
  playerId      Int
  match         Match     @relation(fields:[matchId], references: [id])
  matchId       Int
  score         Int
  role          playerRole

  @@id([playerId, matchId])
}

enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
}

enum playerRole {
  PLAYER_ONE
  PLAYER_TWO
}
